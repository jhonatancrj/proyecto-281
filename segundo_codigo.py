# -*- coding: utf-8 -*-
"""segundo codigo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1x8lnnYzifym4ys7FywpDznk5OFBBAPlp
"""

from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Cargar el archivo .arff
file_path = '/content/drive/MyDrive/datos/diabetes_datos.arff'
data, meta = loadarff(file_path)

# Convertir a DataFrame
df = pd.DataFrame(data)

# Eliminar la columna 'Diabetes' (o la columna de la clase) para el aprendizaje no supervisado
X = df.drop('Diabetes', axis=1)

# Estandarizar los datos
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Definir el número de clusters
k = 3  # Puedes probar con diferentes valores de k

# Aplicar K-means clustering
kmeans = KMeans(n_clusters=k, random_state=42)
kmeans.fit(X_scaled)

# Asignar los labels de los clusters a los datos
df['Cluster'] = kmeans.labels_

# Mostrar el DataFrame con los clusters
print(df.head())

# Visualización de los clusters (si hay 2 o 3 dimensiones)
# Reducimos la dimensionalidad para la visualización con PCA (si es necesario)
from sklearn.decomposition import PCA

# Reducir a 2 dimensiones para visualización
pca = PCA(n_components=2)
X_pca = pca.fit_transform(X_scaled)

# Graficar los clusters
plt.figure(figsize=(8, 6))
plt.scatter(X_pca[:, 0], X_pca[:, 1], c=df['Cluster'], cmap='viridis')
plt.title('Visualización de los Clusters con PCA')
plt.xlabel('Componente Principal 1')
plt.ylabel('Componente Principal 2')
plt.colorbar(label='Cluster')
plt.show()

# Puedes ajustar el número de clusters, 'k', y observar los resultados.